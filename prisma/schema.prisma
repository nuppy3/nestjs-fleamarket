// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ■スキーマ定義
// スキーマとは、DBのTBL構造を表したデータモデル（modelキーワードにて実装）
// このスキーマ定義をもとにDBマイグレーションを実施する（TBL作成など）
// DBマイグレーション：npx prisma migrate dev --name init　（init部分は任意のマイグレーション名）
model Item {
  // <カラム(フィールド)> <Prismaの型> <DBの型(VarCharなど(Intは不要か）、PK,FK,デフォルト値指定> <DB(Postgresql)の型>

  // あくまで型はPrismaの型を定義
  // @id：PK指定
  // default：デフォルト値を指定。uuidにて自動採番。
  // @db.Uuid： PrismaのString型はPostgresqlだとtext型に変換されるので、Postgresqlの
  // 　　　　　　Uuid型として認識させる、@db.Uuid を指定する。 
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @db.VarChar(255)
  price       Int
  description String? // nullを許容
  status      ItemStatus @default(ON_SALE)
  // now(): データが追加されたタイミングの時間
  // @db.Timestamp(0) : 秒まで表示
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  // @updatedAt: 更新時刻がセットされる
  updatedAt   DateTime   @updatedAt @db.Timestamp(0)

  // Userテーブルとの紐付け関連
  userId String @db.Uuid
  // Userテーブルとのリレーションを定義
  // @relation：参照元(Item)と参照先(User)のモデルとの関連付けを行う
  //　・fields属性：参照元(Item)モデルのキーを指定。
  //  ・references属性：参照先(User)モデルの主キーを指定
  //  ・onDelete: Cascade ： 関連するUserが削除されると、紐づくItemも削除される
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// あくまでPrismaのenumであり、Typescriptのenumじゃないから、プロパティに","を付与しない
enum ItemStatus {
  ON_SALE
  SOLD_OUT
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  status    UserStatus
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @updatedAt @db.Timestamp(0)
  Items     Item[] // UserにItemsを持つ必要あるかな。。まぁ、Udemyの例がそうなのでいいか
}

enum UserStatus {
  FREE
  PREMIUM
}
